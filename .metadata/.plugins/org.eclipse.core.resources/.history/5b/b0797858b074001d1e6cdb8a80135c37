package com.oreilly.junit5;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.ValueSource;

class StringTest {

//	@BeforeAll
//	static void beforeAll() {
//		System.out.println("Initialize connection to database");
//	}
//
//	@AfterAll
//	static void afterAll() {
//		System.out.println("Close connection to database");
//	}
//
//	@BeforeEach // in JUnit 4 was called @Before
//	void beforeEach(TestInfo info) {
//		System.out.println("Initialize Test Data for " + info.getDisplayName());
//	}
//
//	@AfterEach // in JUnit 4 was called @After
//	void afterEach(TestInfo info) {
//		System.out.println("Clean test data for " + info.getDisplayName());
//	}

	// You can call the method whatever you want, as long as it is annotated with
	// @Test, it is a test
	@Test
	void lengthBasic() {
		int actualLength = "ABCD".length();
		int expectedLength = 4;

		assertEquals(expectedLength, actualLength);

		// Assert that length is 4
		// Write test code
		// Invoke method - ex: square(4) => this is called CUT - Code Under Test
		// Checks in place - ex: 16 => checks are called ASSERTIONS
	}

	@Test
	void lengthGreaterThanZero() {
		assertTrue("ABCD".length() > 0);
		assertTrue("ABC".length() > 0);
		assertTrue("A".length() > 0);
		assertTrue("DEF".length() > 0);
	}

	@ParameterizedTest
	@ValueSource(strings = { "ABCD", "ABC", "A", "DEF" })
	void lengthGreaterThanZeroUsingParameterizedTest(String str) {
		assertTrue(str.length() > 0);
	}

	@ParameterizedTest
	@CsvSource(value = { "abcd, ABCD", "abc, ABC", "'',''", "abcdefg, ABCDEFG" })
	void uppercase(String word, String capitalizedWord) {
		assertEquals(capitalizedWord, word.toUpperCase());
	}

	@ParameterizedTest
	@CsvSource(value = { "abcd, 4", "abc, 3", "'',0", "abcdefg, 7" })
	void length(String word, int length) {
		assertEquals(length, word.length());
	}

	@Test
	@DisplayName("When length is null, throw an exception")
	void lengthException() {
		String string = null;

		assertThrows(NullPointerException.class, () -> {
			string.length();
		});
	}

	@Test
	void toUpperCase() {
		String str = "abcd";
		String result = str.toUpperCase();
		assertNotNull(result);
		// assertNull(result);
		assertEquals("ABCD", result);
	}

	@Test
	void containsBasic() {
//		String str = "abcdefgh";
//		boolean result = str.contains("ijk");
		// assertEquals(false, result);
//		assertFalse(result);

		assertFalse("abcdefgh".contains("ijk"));
	}

	@Test
	void splitBasic() {
		String str = "abc def ghi";
		String[] result = str.split(" ");

		String[] expectedResult = new String[] { "abc", "def", "ghi" };

		assertArrayEquals(expectedResult, result);
	}

}
